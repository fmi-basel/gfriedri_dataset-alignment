[project]
name = "Dataset Alignment"
version = "0.1.0"
description = "Add a short description here"
authors = ["Tim-Oliver Buchholz <tim-oliver.buchholz@fmi.ch>"]
channels = ["conda-forge", "nvidia", "bioconda"]
platforms = ["linux-64", "win-64"]

[system-requirements]
# Minimum linux version for this project to work.
# This is necessary of some HPC setups, which run on e.g. Rocky Linux 8.
linux="4.18"

[tasks]
source_status = { cmd = 'echo "Found $(git status --porcelain source | wc -l) untracked changes in ./source." && exit $(git status --porcelain source | wc -m)'}
log_commit = {cmd = 'echo "[$(date -Iseconds)][Executing] $TASK [Git-Commit] $(git rev-parse --verify HEAD)" >> $WD/githash.log', env = {TASK = ""}}
build_config_s01 = { cmd = "mkdir -p $WD ; TASK=BUILD_CONFIG pixi run log_commit ; cd $WD ; python ../../source/s01_parsing_sbem_acquisition/build_config.py", env = { WD = "runs/example"}, depends_on=["source_status"]}
parse_sbem_acquisition = { cmd = "TASK=PARSE_SBEM_ACQUISITION pixi run log_commit ; cd $WD ; python ../../source/s01_parsing_sbem_acquisition/s01_parse_data.py --config parsing_config.yaml", env = { WD = "runs/example"}, depends_on=["source_status"] }
inspect_parsing = { cmd = "TASK=INSPECT_PARSING pixi run log_commit ; cd $WD ; python ../../source/s02_inspect_parsing/inspection.py --config parsing_config.yaml", env = { WD = "runs/example"}, depends_on=["source_status"] }
build_tile_masking_config = { cmd = "TASK=BUILD_TILE_MASKING_CONFIG pixi run log_commit ; cd $WD ; python ../../source/s03_compute_tile_masks/parse_sections_config.py", env = { WD = "runs/example"}, depends_on=["source_status"]}
submit_mask_workflow_slurm = { cmd = "TASK=SUBMIT_MASK_WORKFLOW_SLURM pixi run log_commit ; sbatch source/s03_compute_tile_masks/slurm-job_run-workflow.sh $ACCOUNT $MAILTO $WD", env = { ACCOUNT = "", MAILTO = "", WD = "runs/example"}, depends_on=["source_status"] }
submit_sbem_parsing_slurm = { cmd = "TASK=SUBMIT_SBEM_PARSING_SLURM pixi run log_commit ; sbatch source/s01_parsing_sbem_acquisition/slurm-job_run-parsing.sh $ACCOUNT $WD", env = { ACCOUNT = "", WD = "runs/example"}, depends_on=["source_status"] }

[dependencies]
python = "3.11"
ome-zarr = ">=0.9.0,<0.10"
pandas = ">=2.2.2,<2.3"
scikit-image = ">=0.24.0,<0.25"
tqdm = ">=4.66.4,<4.67"
zarr = ">=2.18.2,<2.19"
numpy = "<2.0"
questionary = ">=2.0.1,<2.1"
numcodecs = ">=0.12.1,<0.13"
fsspec = ">=2024.6.1,<2024.7"
psutil = ">=6.0.0,<6.1"
scipy = ">=1.14.0,<1.15"
opencv = ">=4.8.1,<4.11"
edt = ">=2.4.1,<2.5"
absl-py = ">=2.1.0,<2.2"
matplotlib = ">=3.9.1,<3.10"
pixi-pycharm = ">=0.0.6,<0.1"
pydantic = ">=2.8.2,<2.9"

[pypi-dependencies]
sofima = {git="https://github.com/google-research/sofima"}
em_alignment = {git="https://github.com/fmi-basel/gfriedri-em-alignment", branch="create_tile-id_maps"}
jax = "*"
faim-ipa = ">=0.3.13, <0.4"

[feature.docs.dependencies]
mkdocs-material = ">=9.5.18,<9.6"
mkdocs-git-committers-plugin-2 = ">=2.3.0,<2.4"
mkdocstrings = ">=0.24.3,<0.25"
mkdocstrings-python = ">=1.9.2,<1.10"
mkdocs = ">=1.5.3,<1.6"
mkdocs-git-revision-date-localized-plugin = ">=1.2.4,<1.3"

[feature.docs.tasks]
clean_docs = "rm -rf site"
build_docs = { cmd ="OFFLINE=TRUE mkdocs build", depends_on=["clean_docs"] }
show_docs = "mkdocs serve"

[feature.dev.dependencies]
pre-commit = ">=3.1.1,<3.8"

[feature.dev.tasks]
install_hooks = "pre-commit install"
lint = { cmd="pre-commit run --all-files", depends_on=["install_hooks"] }

[feature.dev.target.linux.pypi-dependencies]
memray = ">=1.13.3, <1.14"

[feature.nextflow.target.linux-64.dependencies]
nextflow = ">=23.10.1,<23.11"

[feature.nextflow.target.linux-64.tasks]
mask_workflow_slurm = { cmd = "WD=$WD TASK=MASK_WORKFLOW_SLURM pixi run log_commit ; cd $WD ; nextflow run ../../source/s03_compute_tile_masks/masking_workflow.nf --parse_sections_config $(pwd)/mask_workflow_config.yaml -profile slurm -with-report -resume -with-timeline -N $MAIL", env = { WD = "runs/example", MAIL = ""}, depends_on = ["source_status"] }

[feature.jupyter.dependencies]
jupyter = ">=1.0.0,<1.1"

[feature.jupyter.tasks]
jupyter = "jupyter lab"
cp_proof_read_masks = { cmd = "cp source/s03_compute_tile_masks/Proof_Read_Masks.ipynb $WD", env = { WD = "runs/example"}, outputs=["$WD/Proof_Read_Masks.ipynb"]}#, depends_on=["source_status"] }
proof_read_masks = { cmd = "TASK=PROOF_READ_MASKS pixi run log_commit ; cd $WD ; jupyter lab ./Proof_Read_Masks.ipynb", env = { WD = "runs/example"}, depends_on=["cp_proof_read_masks"]}#, depends_on=["source_status"] }

[feature.nbdev.dependencies]
nbdev = ">=2.2.10,<2.3"

[feature.nbdev.tasks]
clean = "nbdev_clean --clear_all"

[feature.napari.dependencies]
napari = ">=0.5.0,<0.6"
pyqt = "*"

[feature.cuda]
system-requirements = {cuda = "11"}

[feature.cuda.target.linux-64.dependencies]
jaxlib="*=*cuda112*"
cuda-nvcc = {version="=11.7", channel="nvidia"}

[environments]
docs = ["docs"]
dev = ["dev"]
nextflow = ["nextflow"]
jupyter = ["jupyter", "napari"]
nbdev = {features=["nbdev"], no-default-feature = true}
napari = ["napari"]
cuda = ["cuda"]
